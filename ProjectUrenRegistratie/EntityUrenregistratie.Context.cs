//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectUrenRegistratie
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class UrenRegistratieEntities1 : DbContext
    {
        public UrenRegistratieEntities1()
            : base("name=UrenRegistratieEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<hourRegistration> hourRegistrations { get; set; }
        public DbSet<project> projects { get; set; }
        public DbSet<task> tasks { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserTask> UserTasks { get; set; }
    
        public virtual int UpdateChangePasswordReset(Nullable<int> userId, Nullable<bool> wachtwoordReset)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var wachtwoordResetParameter = wachtwoordReset.HasValue ?
                new ObjectParameter("wachtwoordReset", wachtwoordReset) :
                new ObjectParameter("wachtwoordReset", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateChangePasswordReset", userIdParameter, wachtwoordResetParameter);
        }
    
        public virtual int UpdatePassword(Nullable<int> userId, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", userIdParameter, passwordParameter);
        }
    }
}
